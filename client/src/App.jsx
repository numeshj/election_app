import React, { useEffect, useState, useMemo } from 'react';
import { io } from 'socket.io-client';
import axios from 'axios';

// Simple color assignment per leading party
const partyColors = {};
const palette = ['#ff595e','#ffca3a','#8ac926','#1982c4','#6a4c93','#00b4d8','#ef476f','#06d6a0'];
let colorIndex = 0;
const getPartyColor = (code) => {
  if(!partyColors[code]) partyColors[code] = palette[colorIndex++ % palette.length];
  return partyColors[code];
};

export default function App(){
  const [results, setResults] = useState([]);
  const [selected, setSelected] = useState(null); // selected result detail
  const [view, setView] = useState('dashboard'); // dashboard | map | charts | coverage
  const [districts, setDistricts] = useState([]);

  useEffect(()=>{
    axios.get('http://localhost:4000/api/results').then(r=> setResults(r.data));
    axios.get('http://localhost:4000/api/districts').then(r=> setDistricts(r.data));
    const socket = io('http://localhost:4000');
    socket.on('results:all', data => setResults(data));
    socket.on('result:new', record => setResults(prev => [...prev, record]));
    return ()=> socket.close();
  },[]);

  // All results sorted by creation time (ascending received order)
  const resultsSorted = useMemo(()=> {
    return [...results].sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt));
  },[results]);

  const latestResult = resultsSorted[resultsSorted.length - 1];

  // Latest result per division (pd_code) for granularity
  const latestPerDivision = useMemo(()=>{
    const map = new Map();
    resultsSorted.forEach(r=> { if(r.pd_code) map.set(r.pd_code, r); });
    return map; // Map<pd_code, result>
  },[resultsSorted]);

  // Build district completion + aggregation structure using districts metadata
  const districtData = useMemo(()=> {
    if(!districts || districts.length===0) return [];
    return districts.map(d => {
      const districtCode = d.id; // e.g. '19'
      const divisions = d.divisions?.map(div=> div.id) || [];
      let aggregationMap = new Map();
      let reportedDivisions = [];
      divisions.forEach(divCode => {
        const res = latestPerDivision.get(divCode);
        if(res){
          reportedDivisions.push(divCode);
          res.by_party.forEach(p=> {
            const prev = aggregationMap.get(p.party_code) || { party_code:p.party_code, party_name:p.party_name, votes:0 };
            prev.votes += p.votes || 0;
            aggregationMap.set(p.party_code, prev);
          });
        }
      });
      const parties = Array.from(aggregationMap.values()).sort((a,b)=> b.votes - a.votes);
      const top = parties[0];
      const complete = reportedDivisions.length === divisions.length && divisions.length>0;
      return {
        ed_code: districtCode,
        ed_name: d.name?.en || d.name,
        divisionCodes: divisions,
        reportedDivisions,
        reportedCount: reportedDivisions.length,
        totalDivisions: divisions.length,
        complete,
        parties,
        topParty: top?.party_code,
        topVotes: top?.votes || 0,
        coverageRatio: divisions.length? reportedDivisions.length / divisions.length : 0
      };
    });
  },[districts, latestPerDivision]);

  // Simplified winners list for map coloring
  const districtWinners = useMemo(()=> districtData.filter(d=> d.topParty).map(d=> ({
    ed_code: d.ed_code,
    ed_name: d.ed_name,
    party_code: d.topParty,
    votes: d.topVotes,
    complete: d.complete,
    ratio: d.coverageRatio,
    data: d
  })), [districtData]);

  // District totals derived from aggregated parties
  const districtTotals = useMemo(()=> districtData.map(d=> ({
    ed_code: d.ed_code,
    ed_name: d.ed_name,
    totalVotes: d.parties.reduce((a,p)=> a+p.votes,0),
    topParty: d.topParty,
    topVotes: d.topVotes,
    record: d
  })).sort((a,b)=> a.ed_code.localeCompare(b.ed_code)), [districtData]);

  // Island totals aggregated from district aggregated parties
  const islandTotals = useMemo(()=>{
    const map = new Map();
    districtData.forEach(d=> d.parties.forEach(p=> {
      const prev = map.get(p.party_code) || { party_code:p.party_code, party_name:p.party_name, votes:0 };
      prev.votes += p.votes;
      map.set(p.party_code, prev);
    }));
    return Array.from(map.values()).sort((a,b)=> b.votes - a.votes);
  },[districtData]);

  const totalDistricts = districtData.length;
  const receivedDistricts = districtData.filter(d=> d.complete).length;

  return <div className="client-app">
    <TopNav current={view} onChange={setView} />
    <div className="client-main">
      {view === 'dashboard' && <>
        <div className="dash-left">
          <h1 className="page-title">Sri Lanka Presidential Results (Live)</h1>
          <h3 className="section-title">District Leaders Map</h3>
          <InteractiveMap winners={districtWinners} onSelect={(d)=> setSelected(d.data)} />
          <Legend />
          <div className="cards-grid">
            <Card title="Latest Result - Just Received">
              {!latestResult && <em>No results yet</em>}
              {latestResult && <div onClick={()=> setSelected(latestResult)} className="clickable">
                <strong>{latestResult.ed_name} / {latestResult.pd_name}</strong><br/>
                <small>ID: {latestResult.id}</small><br/>
                <small>Seq: {latestResult.sequence_number}</small><br/>
                <small>Created: {new Date(latestResult.createdAt).toLocaleTimeString()}</small>
              </div>}
            </Card>
            <Card title="Island Total">
              {islandTotals.length === 0 && <em>No data</em>}
              {islandTotals.slice(0,8).map(p=> <div key={p.party_code} className="list-row">
                <span><span className="party-swatch" style={{background:getPartyColor(p.party_code)}}></span>{p.party_code}</span>
                <span className="mono">{p.votes.toLocaleString()}</span>
              </div>)}
            </Card>
            <Card title="Districts Wise Totals">
              {districtTotals.length === 0 && <em>No data</em>}
              <div className="scroll-box h200">
                <table className="tight-table">
                  <thead><tr><th align='left'>District</th><th align='right'>Total</th><th align='left'>Top</th></tr></thead>
                  <tbody>
                    {districtTotals.map(d=> <tr key={d.ed_code} className="row-link" onClick={()=> setSelected(d.record)}>
                      <td>{d.ed_name}</td>
                      <td align='right' className="mono">{d.totalVotes.toLocaleString()}</td>
                      <td><span className="party-swatch sm" style={{background:getPartyColor(d.topParty)}}></span>{d.topParty}</td>
                    </tr>)}
                  </tbody>
                </table>
              </div>
            </Card>
            <Card title="All Results in Received Order">
              {resultsSorted.length === 0 && <em>No results</em>}
              <div className="scroll-box h200 list-compact">
                {resultsSorted.map(r=> <div key={r.id} className="list-item row-link" onClick={()=> setSelected(r)}>
                  <strong>{r.sequence_number}</strong> - {r.ed_name} / {r.pd_name} <small className="dim">{new Date(r.createdAt).toLocaleTimeString()}</small>
                </div>)}
              </div>
            </Card>
              <Card title="District Completion">
                <div className="scroll-box h200">
                  <table className="tight-table">
                    <thead><tr><th align='left'>District</th><th align='right'>Divisions</th><th align='left'>Status</th></tr></thead>
                    <tbody>
                      {districtData.map(d=> <tr key={d.ed_code} className="row-link" onClick={()=> setSelected(d)}>
                        <td>{d.ed_name}</td>
                        <td align='right' className="mono">{d.reportedCount}/{d.totalDivisions}</td>
                        <td><span className={d.complete? 'status-chip complete':'status-chip partial'}>{d.complete? 'Complete':'Partial'}</span></td>
                      </tr>)}
                    </tbody>
                  </table>
                </div>
              </Card>
          </div>
        </div>
        <div className="dash-right">
          <h2 className="panel-heading mt0">District Leaders</h2>
          <table className="tight-table">
            <thead><tr><th align='left'>District</th><th align='left'>Party</th><th align='right'>Votes</th></tr></thead>
            <tbody>
              {districtWinners.map(w=> <tr key={w.ed_code} className="row-link" onClick={()=> setSelected(w.record)}>
                <td>{w.ed_name}</td>
                <td><span className="party-swatch" style={{background:getPartyColor(w.party_code)}}></span>{w.party_code}</td>
                <td align='right' className="mono">{w.votes}</td>
              </tr>)}
            </tbody>
          </table>
        </div>
      </>}

      {view === 'map' && <div className="view-shell">
        <h2 className="panel-heading mt0">Interactive Map</h2>
  <InteractiveMap winners={districtWinners} onSelect={(d)=> setSelected(d.data)} large />
        <p className="hint-text">Hover / click districts to inspect. Colors correspond to leading party.</p>
      </div>}

      {view === 'charts' && <div className="view-shell">
        <h2 className="panel-heading mt0">Charts</h2>
        <div className="chart-grid-alt">
          <Card title='Island Vote Share (Top 6)'>
            <BarChart data={islandTotals.slice(0,6)} />
          </Card>
          <Card title='Island Vote Share Pie (Top 6)'>
            <PieChart data={islandTotals.slice(0,6)} />
          </Card>
        </div>
      </div>}

      {view === 'coverage' && <div className="view-shell">
        <h2 className="panel-heading mt0">Coverage</h2>
        <div className="progress-bar-lg"><div style={{width: totalDistricts? (receivedDistricts/totalDistricts*100).toFixed(1)+'%':'0%'}} /></div>
        <p className="coverage-text"><strong>{receivedDistricts}</strong> of <strong>{totalDistricts}</strong> districts reported.</p>
  <InteractiveMap winners={districtWinners} onSelect={(d)=> setSelected(d.data)} />
      </div>}
    </div>
  {selected && <DetailOverlay result={selected} onClose={()=> setSelected(null)} />}
  </div>;
}

// Interactive SVG Map (subset of paths for brevity; extend similarly)
function InteractiveMap({ winners, onSelect, large }){
  // Winner lookup by normalized district name
  const byName = useMemo(()=> Object.fromEntries(winners.map(w=> [normalizeName(w.ed_name), w])), [winners]);
  const paths = useMemo(()=> sriLankaPaths(), []);
  return <div className={large? 'map-shell large':'map-shell'}>
    <svg viewBox='0 0 1000 1000' className="map-svg" data-large={large? '1':'0'}>
      <g>
        {paths.map(p=> {
          const key = normalizeName(aliasName(p.name));
          const w = byName[key];
          if(!w){
            return <path key={p.name} d={p.d} className="map-district outline" />;
          }
            const fill = getPartyColor(w.party_code);
            const opacity = w.complete? 1 : (0.55 + 0.45 * w.ratio);
            return <path key={p.name} d={p.d} fill={fill} fillOpacity={opacity} className="map-district has-data" onClick={()=> onSelect && onSelect(w)}>
              <title>{`${p.name} - ${w.party_code} (${Math.round(w.ratio*100)}% divisions)`}</title>
            </path>;
        })}
      </g>
    </svg>
  </div>;
}

function normalizeName(n){ return (n||'').toLowerCase().replace(/\s+/g,'').replace(/-/g,''); }
// Handle naming differences between SVG and dataset
function aliasName(name){
  const n = normalizeName(name);
  const map = {
    mulaithivu:'mullaitivu', // SVG vs dataset
    monaragala:'moneragala', // spelling
    kandy:'mahanuwara',      // local language vs common
  };
  return map[n] || name;
}

// Complete district path list extracted from original SVG
function sriLankaPaths(){
  return [
    { name:"Trincomalee", d:"M534.5 241.9l0.1 3.6 2.7 2-2.4 2.3-2.2 2.6 3.6 2.8 3.9-0.3 3.2-2.9 2.4-4.2 1.5-3.9 0.1 0.1 8.3 10.1 7.4 12.7 3 3.1 4.2 1.3 3.4 2.7 5 12.1 1.2 1.3 1.3 1.4 0.1 0 5.6 2.6 2.9 6 3.2 12.2 0.6-2.2 0.7-0.9 1.3 0.3 2.2 1.2-0.6 2.3 6.4 7 2.1 3.5 0 4.2-1.7 1.7-2.4 1.1-2.2 2.5 0.1 0 1.6-0.4 1.8-0.5 0.4-0.2 0.8-0.5 0.1 0.1 5 10.9 0.7 5.6-5.7 1-0.1 0 1.2-3.8-1.5-3-2.6-0.4-1.8 4 0.6 3.1 1.7 2.2 0.9 2.4-1.7 3.5-1.4-1-2.5-1.9-4-2.5-4-1-3.9 1.7-3 4 1.1 2.1 3.6-0.5 4.8-4 3.3 3.5 2.9 4.2 3.6 3.5 5.1 1.5 10.6-0.2 3.6-2.3-2.4-5.4 6.1-2.8 2.4-0.8 2.5 0.2 0.1 0 2.8 1.6 2.5 2.8 1.9 3.2 1.7 9.3 3.6 12 0.1 3.1 0.1 3.2-2.9-2.1-3.1-6.2-2.7-1.3-0.1 1.7 1.1 7.6 0.1 0.5 1.3 2.9 1.5 0.8 1.4 0.6 0.1 0 3.1 0 2.4 1.2 1.5 8.9 1.8 6.2 0.3 1 0.5 3.8-20.7-2.2-3.9 1.3-3.5 0-2.9 0-2.1 2.3-1.5 2.8-1.8 1.3-1.6 1.4-1.4 6.1-1.2 2.2-3.3 7.6-5.7 1.4-1.2-0.4-0.9-0.7 2.7-1.7 1.2-2.9-0.8-4.4 0.1-3-0.3-2.9-1.7-2.4-2.9 0.3-4.1-2.1-3.7-2.9-3.8-2.2-4.1 0-17.5-4.3-9.7 1-2.9-2.9-0.9-4.9-3.6-2.7-3.7-1.5-2.7-4-3.5 1 5-17.9 0.6-2.9 0.9-2.8 2.9-2.8 3.2-2.2 1.9-3.4-1.5-3.6-2.7-2-2-2.7-3.3-7.7-6.1-9.1-0.9-5.6-2.5-2.4-1.9-2.2-0.2-4.8 3.5-8.3-1.7-4.9-4.3-9.4-0.1-10 3.9-5.8 2.7-6-2.2-1.7-1.9-2.5-3.5-3.9-10.1-7-5.8-3.4-6.8-0.1-6.5 2.6 1-4 1.9-3.4 9.1-4.2 10.6-1.4 4.5-1.3 4-2.3 4.4-1.3 3.6-1.6z"},
    { name:"Mulaithivu", d:"M534.5 241.9l-3.6 1.6-4.4 1.3-4 2.3-4.5 1.3-10.6 1.4-9.1 4.2 4.3-15.8-2.8-3.7-7.4-4.5-7.2-1.1-3.4 2.3-3.6 0.9 0.4-3.2 2.2-3.3-2.7-4.7-6.2-0.7-0.8-7.5-7.2-2.7-7.5 0.2-0.5 1.1-0.4 1.2-2.2 1.3-2.3 1.1-4 3.5-5.6 2.5-3.6-5.3-5.7-3.6-8 0.2-4.4-0.3-4.2 0.4-0.6 3.4 1.8 2.5 3.4 0.5 0.2 1.9 0 2.1 0.9 4 0.2 3.9-4.1 6.3-6.4 5.2-10.7 6.8-38.1 2 3-8.4-1.1-1.6-1.1-2.1 0.8-2.7 1.2-2.6 0.8-2.6 1-2.3 5.1-1.7 0.3-4.8-0.5-5.5 0.9-3.4 0.1-3.5-0.2-1.8-0.5-1.6-4.2-6.8-1.4-7.6-0.3-8 6.1 0.8-0.6-6.5 6-7.9 17.7-2 6.3-0.1 6.2 1.1 6.1-0.6 4-10.1 3.1-0.1 10.5 0.6 5.8-0.4 3.9-2.1 3.2-10.6 1.1-0.3 1.7 2.2 4.6 3.8 5.2 2.9-0.6-5.3 0.7-5.3 4.9-3.9 0.5-3.9 1.1-1.1 1.2-0.8 1.4-1.2 27.3 22.2 0.2 0.4 1.7 2.7 2.5 3.3 5 4.7 3.1 4-2.7 1.5-0.1 0-1.5-0.7-0.2-0.1-0.1 0-2.4-3.1-1.3-0.7-4.2-0.7-1.8 0.5 0.9 1.9 0.3 0.6 11.9 11.2 4.7 2.6-1.8-2.9-1.1-2.7 0.5-1.9 3.2-0.8 1.5 1 2.5 7.3 2.2 4.4 8.8 17.6-1.8-0.6-4.9-1.9-3 0-1.3 3.3 1.8 0.8 3.7 0.7 3.4 2.1 0 0.3 0.5 5 1.6 0 0.7-1.3 0.7-0.6 0.8-0.4 1.1-0.7 1.1 4.6 0.2 0.6 3.2 7.5 4.4 6.7 4.5 2.9 0.3 0.3 0.5 0.4 0 1.7-1.1 1.6-2.1 0.8-0.6-0.7-2.6-4.1-2.7-1.5-6.3-1.6-3.7-1.7 1.7 2.4 0.9 1.3 8.3 7.8 0 0.8z"},
    { name:"Jaffna", d:"M466.1 133.1l-1.4 1.2-1.2 0.8-15.7-10.8-5.4-2.5-4.8-1.1-0.7-0.3-0.7-0.3-4.1-3.2-1.6-0.9-1.6-0.3-1.9 0.1-0.4-2.3-3-9 0.6 0.3 0-1.8-8.4-4.2-20.3-16.7-16.6-19.2-8.4-4.6-13.2-3.1-3.5-2.5-0.5-3.6 4.9-2.1 1.5-0.3 4.8-0.8 9.6-0.4 4.6 0.8 3.2 2.3 2.1 7.6 2.1 3.2 30.2 35.7 4.4 3.2 9 5.2 36.4 29.6z m-85.3-37.6l-11.8-5.2-4.3-2.5-2.9 0 0.6 5.7 1.6 1.6 2.4 1.9 1.5 2.3-1.5 3-1.7 0.6-1.7-1-1.5-1.3-4.5-2.3-8.6-7.5-4.9-2.1 2.5 2.8 4.5 3.9 2.6 2.8-5.6-1-5.5-2.3-11.1-6.2-8.9-7-5.2-1.9-0.5-0.3-2-1.3-1.9-0.8-0.3 1.7-2.5-1.7-1-2.3-0.4-2.7-0.9-3-1.5-2.6-0.9-1.2-2.4-3.1-1.5-2.7 5-2.5 9.1-8.5 4-1.8 0.1 0 18 1.6 9.4-1.1 3.4 0.4 1.4 3.2-0.3 4.9 0.7 1.7 2 0.6 1.9 0.3 5.5 1.4 1.2 0.7 1 2 2.5-0.1 1.9-0.6 0.8-0.2 1.1-0.2 0.8-0.1 1.8 1.1 0.8 0.4 6.4 7.1 9.3 10.1 0 0.1-3.1 6.7-4.9 8.5z m-121 27l-1.9 1.7-1.9 1.8-5.8 0.4-5.4-1.8-2.3-3 0-9.6 0.6-2.4 1.6 0.3 1.5 2 1 2.4 4 1.3 4.7 0.4 1.2 0.8 2.7 5.7z m38-27.4l-3.6-2.6-3.5-5.4-5.6-11.2 2.5-4 0.6-5.1 1.5-4.2 5-1.1 2.6 0.8 0.1 0 0.2 2-0.9 2.8-0.6 3.1 0.1 3.2 0.3 2.6 0 0.2 0.2 0.5 0.8 1.8 1.1 1.2 0.8 1 1 0.2 4.5-0.2 0.7 0.7 0.3 3.5 0.6 1.4 2.6 1.7 3.6 1.5 3 1.7 0.2 0.6 0.8 1.7-1.6 1.6-3 0-3.3-1-2.3-1.4-1.6-0.4-4.2 2.4-2.9 0.4z"},
    { name:"Kilinochchi", d:"M423.6 104.5l3 9 0.4 2.3-2.8 0.2-1.8 0.7-0.3 0.4-0.5 0.8-0.9 0.5-3.1-2.3-1.2-0.2-7.5 0.2-2.1-0.6-16.4-14.3-7-4.6-0.1 0-2.5-1.1 4.9-8.5 3.1-6.7 0-0.1 11 12.1 7.2 4.5 16.6 7.7z m39.9 30.6l-1.1 1.1-0.5 3.9-4.9 3.9-0.7 5.3 0.6 5.3-5.2-2.9-4.6-3.8-1.7-2.2-1.1 0.3-3.2 10.6-3.9 2.1-5.8 0.4-10.5-0.6-3.1 0.1-4 10.1-6.1 0.6-6.2-1.1-6.3 0.1-17.7 2-6 7.9 0.6 6.5-6.1-0.8-4.4 3.3-4.9 2.5-7.9 0.7-1.7 0 1.4-5.7 0-13.6 0.5-2-0.4-1.3-2.7-0.5-6.4-3.3-2.4-2.4-1.6-4.4-0.3-0.8-1.1-5.4-0.1-3.1 2.8-3 5.1-2.5 5.6-1.8 4.7-0.7 2.1-1.1 5-6.7 0.6-0.5 0.9-0.7 1.7-1 2.1-0.8 2.6-0.4-2.2-4-1.3-1.8-1.3-1.8-3.4-3.4-4.5-3.4-17-10-3.5-4.3 7.4 0.2 7.1 2.9 13.9 8.1 13.2 3.3 3.5 2.3 5.5 4.8 1.3 2.5-2.8 1.4 0.6 1.6 0.8 1.6-1.4 1.6 4.8 3.3 11.4-2.8 20.8-8.3 5.7 0.5 12.2 3.4 14.5 6.6 11 2.1z"},
    { name:"Mannar", d:"M366 183.9l0.3 8 1.4 7.6 4.2 6.8 0.5 1.6 0.2 1.8-0.1 3.5-0.9 3.4 0.5 5.5-0.3 4.8-5.1 1.7-1 2.3-0.8 2.6-1.2 2.6-0.8 2.7 1.1 2.1 1.1 1.6-3 8.4 38.1-2 6.2 2.9 3.6 5.7 3.5 9-1.2 8.1-12.3 4.6-13 1.6-8.4-0.9-6.4 3.6-3.5 7.8-5.9 0.6-0.9 3.5 0 3 5.4 4.2 8.8 11.3-22.5 5.9-11.3-0.1-10.2-4.2 1.8 13.7-0.5 21.6-2.2-0.3-1.9-0.9-6.2-3.5-5.9-2.5-6.8-0.6-6.1-2.3-2.6-1.6 0.9-0.9 0.3-1.2 2.3-7.1 0.3-0.3 0.2-0.2 0.5-2 2.2-4.7 2-22.7-5.5-14.5 0.4-2.5 0.4-16.5 0-0.2-0.5-5.6-0.7-2.7-1.2-2-1-2.4 2.2-1.1 3.1-0.6 2-0.6 13.4-12.1 7-3.5 2.9-2.5 1.5-5.7 2.8-5.9 1.5-8.1 7.5-19.2 0.2-1.1 0.7-2.8 1.7 0 7.9-0.7 4.9-2.5 4.4-3.3z m-110.1 37.7l-2.6-1-1.1-2.2 0.7-2.3 3-1 10.3 0 4.6 1.2 4.7 1.2 9.8 3.8 9.4 5.4 7.9 7.7-0.1 0-3.7-0.8-6.7-3.3-3.9-0.7 6 6.8 4.7 5.4 2.1 3.7-5.5-0.7-3.6-2.8-2.5-3-1.9-1.4-2.3-1.2-9.5-8.5-4.7-2.1-4.8-2.2-3.4-0.9-1.8-0.5-5.1-0.6z"},
    { name:"Puttalam", d:"M301.7 339.1l2.6 1.6 6.1 2.3 6.8 0.6 5.9 2.5 6.2 3.5 1.3 9.6-4.2 8.9-7.2 5.9-0.3 1.7-1 2.1-3.9 1.8-2.6 5.7 3.4 6.6 5.8 23.4 1.4 4.2 4.8 0 3.9-1.8 4.1 3.1 4.7-0.2 3.4 2.8 2.5 3.3 0.5 4.4-0.1 4.7 2.4 9.2 0.8 4.6 2.2 4.1 3.2 1.1 2.7 1.8-0.6 2.8-0.9 3 0.2 6.3-0.2 5.3-1.7 2.6-1.4 2.7 2.8 5.2-2.9 2.2-4.8-2.7-1.3 2.3-0.1 2.8-1.8 1.9-1.4 0.4 0.2-0.4 0.2-0.4-3.4 1.6-1.4 3.2-0.4 2.4-0.9 2.1-4.9 2.5-1.1 2.4-0.6 2.5-2.8 1.9-3 1.6-0.9 2.5-0.4 2.8-2.2 5.6-0.7 6.2 1.2 2.6 0.9 2.4-1.6 2.2-2.5 1-3.3 0.3-3 0.9-1.6 2.7-1.1 3 2.8 0.7 1.3 2.2-2.8 1.5-3.3 0.8-1.6 2.3-0.9 2.7-3.5 5.9-2.5 6.4-0.4 8 0.4 8 8.5 45.8 0.6 13.8-4-1.6-3.4 2.2-2.7-0.4-1.8-2-4.5 0.6-4.3 1.1-5.5-0.2-9.9-73-1.4-3 0.9-1 0.7-0.1 1.7 1.1 0.4-4 1.1-4.7 0.3-2.2 0.3-2.3-1.3-3.5-1.8-3.2-0.3-2.1-0.3-2.1 0-8.6-5.3-26.1-0.7-3-2.7-5.7-2.3-12.1-3.8-9.5-5.8-26.2 0-7.5 1 0.5 0.1 0.1 0 0.2 0.5 0.8 0.8-4.3-1.2-13.8-1.2-4.1 3.8-2.5 3.6-4.7 2.6-5.3 1-4.4 1.1-2.9 6.8-10.8-0.1 0.2-3.4 8.2-4.4 7.7 1 1.9 0.2 0.4 1.7 1.8 2.2 0.8 2.8 0-2.3 6.4-2.3 4.6-1 0.8-1.1 0.1-0.8 0.7-0.4 2.4 0.2 5.6-0.2 1.7-3.9 12.4 0.2 2.4 0.3 4.6 4 4.8 1.1 1.3-4.6 9.7 7.4 5.4 10.7 0.8 5.4-3.9-1-4.1-1.8-3.2-0.6-1.3-0.9-1-2-2.6-2.3-1.5-0.7-2.5 7.8-14.8-0.3-2.7-1-2-1.2-1.7-0.7-1.7-0.2-2.8 0.3-4.9-0.1-1.9 0-0.1-0.1-0.4-0.6-1.6-0.4-0.4-0.5-0.4-0.4-1 0.4-2.6 1.1-2.2 3-3.9 0.7-2.6 0.5-4.9 2.1-9.7 2.2-22.8 1.4-2.6 1.5-1.3 1.2-1.5 0.5-3.4 0-9.7 1.3-4.8 3.1-3 3.8-2.6 2.1-2.3z"},
    { name:"Gampaha", d:"M282.1 640.8l5.5 0.2 4.3-1.1 4.5-0.6 1.8 2 2.7 0.4 3.4-2.2 4 1.6 4.9-1.9 8.8-6.9 5.5-0.2 6.4 4.4 6.6-1.9 5.7-4 6.4-1.2 2.1 2.3 0.6 2 1.4 1.9 5.7 6.6 4 2.9 0.4 3.1-2.3 1.8-0.6 8-3 2.8-3.6 1.9-1 6.6 2.8 5.8 5.6-1.3 4.9 1.4-1.7 3.9-3.4 2.4-2.9 6.7-1.2 6.8 3.4 11 0.1 2.1-0.7 1.9-4.2 1.5-6.2-0.6-4.6 2.1-3.7 3.6-0.9 4.4-0.3 4.5-4.9 0.3-4.1-0.5-2.7-1.1-2.6-1.4-2.7-2.5-3.1-1.9-3.9 0.2-4 0.8-11.5-3.3-2.1 0.8-1.8 1-4.1-1-3.8-2-4.9-1.9 2.3-5.5 0.6-2.6-0.1-2.7 0-0.1-11-39.2 1.5-5.8-0.1 3.6 0.9 2.2 1.2 1.7 1.1 2.1 2.2 7.7 1.1 1.9 1.4 0 0.4-2.2 0.6-0.9 0.6-0.2 0.2 0.1-0.1-7.1-0.5-3.1-1.2-2.6-1.1-0.7-3-0.7-1.3-0.9-0.2-0.3-0.8-1.7 0.4-1.9 0.8-1.7 0.5-1.6-1.4-10z"},
    { name:"Colombo", d:"M287.1 713l4.9 1.9 3.8 2 4.1 1 1.8-1 2.1-0.8 11.5 3.3 4-0.8 3.9-0.2 3.1 1.9 2.7 2.5 2.6 1.4 2.7 1.1 4.1 0.5 4.9-0.3 0.3-4.5 0.9-4.4 3.7-3.6 4.6-2.1 6.2 0.6 4.2-1.5 5 0.4 4 2 0.7 4.2-3.1 2.9 0.3 2.2 0.1 2.3-2.9 3.6-2.5 4-1 3.2-1.2 2.8 5.7 6-5.1 4.6-6.7-1.6-7.5 3.2 1.5 6.7-4.5-1.2-3-6.9-1.2-0.7-1.5-0.3-2.8 3.3-3.6 1.8-2.5-1.1-2.6 0.3-8.9 7.6-2.5 1.1-2.7 0.7-6.7 2.5-10.6-6.7-0.3 3.9 1.4 4.3 0.7 3 0.1 2.9-0.1 0.1-0.4 0.6-8.6-22.1-3.1-17.5-0.3-1.7 0-16.7 0.3-0.7z"},
    { name:"Kalutara", d:"M298.8 771.7l0.4-0.6 0.1-0.1-0.1-2.9-0.7-3-1.4-4.3 0.3-3.9 10.6 6.7 6.7-2.5 2.7-0.7 2.5-1.1 8.9-7.6 2.6-0.3 2.5 1.1 3.6-1.8 2.8-3.3 1.5 0.3 1.2 0.7 3 6.9 4.5 1.2-1.5-6.7 7.5-3.2 6.7 1.6 0.8 4.7 4 10.7-0.3 3.7 1.4 4.4 2.3 4.6 7 6.8 1.4 6.8 2.5 2.4 3.2 1.2 5.2 4.7 3.3 6.4-3.5 1.4 1.3 3.9 9.7 13.7 8.3 14.5-8.2 1.9-8 5-4.3 1.9 0 4.9 1.7 5.1-0.4 4.6-3.6-2.8-3.6-3.5-6.8-5.2-7 0.6-6.3 3.5-9.9-1.9-3.9-2.6-3.7-3.2-4.6-2-4.2-0.9-8.4-3.9-1.2-2-1.7-1.6-2.3 0.9-1.5 1-1.4-1.2-1.2-1.7-1.6-0.4-1-4-0.5-0.4-1-0.6-1-0.9-0.6-1.2 0.2-1.4 1.1-0.3 1.2 0.1 0.6 0-1.8-12.2-0.1-1-4.8-12.3-11.2-28.7z"},
    { name:"Galle", d:"M317.7 834.6l1.6 0.4 1.2 1.7 1.4 1.2 1.5-1 2.3-0.9 1.7 1.6 1.2 2 8.4 3.9 4.2 0.9 4.6 2 3.7 3.2 3.9 2.6 9.9 1.9 6.3-3.5 7-0.6 6.8 5.2 3.6 3.5 3.6 2.8 0.4-4.6-1.7-5.1 0-4.9 4.3-1.9 8-5 8.2-1.9 2.8 2.9 3.2 2.7 3.9 1.6 3.4 0.1 7.2 3.5 3.7-0.1 2 2.9-4.8 1.4-3.1 3.1 2.7 4.2 3.6 3.5-1.4 6.6-7.1-1.6-4.4-4.2-4.9-3.6-3.8-1.2-3.7 1 2.3 4.3 4.6 2.9 4.8 7 1.8 6.6-4.1 5-8.1-1.4 2.4 2.8 1.1 3.8-1.6 4.8-2.1 4.5 1.5 4.5 3.5 3.4 4.1 2.8 3.7 3.3-3.2 3.7-3.6 3.7-3.2 1.3-1.4 2.2 0.7 2.4 1.8 1 4.1 1.7-1.4 2.8-4.2 1.5-2.5 4.5 0 2.6 0.4 2.4 0.1 0.3-1.5-0.3-1.1-0.5-0.8-1-1-1.1-1.8-0.5-1 0.3-0.9 0.8-0.9 0.6-1.2 0-0.4-0.3-0.4-0.4-1.4-2-0.8-0.5-0.1-0.1-1.7-0.6-9.8-3.5-4.1-0.9-2.8-0.6-5-4-1.2-0.5-2.2-1.1-1.7 1.7-4.3-3.5-18.8-19.9-1.5-1.2-0.2-0.2-0.5-0.7-0.3-0.9 0.1-2-0.6-1-0.8-1.1-2.1-2.7-10.6-22.5-0.5-2.1 0.1-2 0-1.9-0.4-1.2-1.9-4-1.9-10.8-4.3-7.6-2.6-10.9z"},
    { name:"Matara", d:"M410.6 945.3l-0.1-0.3-0.4-2.4 0-2.6 2.5-4.5 4.2-1.5 1.4-2.8-4.1-1.7-1.8-1-0.7-2.4 1.4-2.2 3.2-1.3 3.6-3.7 3.2-3.7-3.7-3.3-4.1-2.8-3.5-3.4-1.5-4.5 2.1-4.5 1.6-4.8-1.1-3.8-2.4-2.8 8.1 1.4 4.1-5-1.8-6.6-4.8-7-4.6-2.9-2.3-4.3 3.7-1 3.8 1.2 4.9 3.6 4.4 4.2 7.1 1.6 1.4-6.6-3.6-3.5-2.7-4.2 3.1-3.1 4.8-1.4 4.5-0.7 4.5-1 1.6-3.8 3.9 0 10.2-1.4 3.3 6.2-1.5 4.1 4.1 0.7 5.5-0.9 2.6 3.2-0.2 2.2 3 2.2-1.2 1.2 0 2.2-2.2 0.9 0.4 1.7-1.6 4.1 1.6 3.7-8.9 6.7-2.8 9.9 4 2.9 4.4 1.6 2-0.3 1.3 1.2-1.1 2.4-1.4 2.1 0.8 4 3.8 2 2.7-0.4 2.5 0.5-0.8 2-2.1 2 2.5 8.9-7.5 3.2 0.6 3.7 3.2 2.1 2.2 0.2 2 1.1-0.1 1.9-1.7 0.9 2.8 4.2 5.8 2.7 1.3 0.7-3.5 4.1-9.5-0.5-3.9 0.5-3.1 1.2-3.2 1.8-5.6 4.2-1.6 0.4-1.6 0.3-3.8-1.4-4.1-2.1-2.3-0.7-1.6-0.5-13.4 1.6-3.8-0.8-1.9-1.9-1.2-2.5-1-1.5-0.7-1.1-3.9 2.3-3.5 0.3-6.2-0.9z"},
    { name:"Hambantota", d:"M490 942.5l-1.3-0.7-5.8-2.7-2.8-4.2 1.7-0.9 0.1-1.9-2-1.1-2.2-0.2-3.2-2.1-0.6-3.7 7.5-3.2-2.5-8.9 2.1-2 0.8-2-2.5-0.5-2.7 0.4-3.8-2-0.8-4 1.4-2.1 1.1-2.4-1.3-1.2-2 0.3-4.4-1.6-4-2.9 2.8-9.9 8.9-6.7-1.6-3.7 1.6-4.1-0.4-1.7 2.2-0.9 13.1 2.6 16.9 6.1 4.5 0.7 4.4-1.1 4.4-0.4 3.5 2.8 2.7 3.1 8.4 1.7 4.9 1.6 1.1-4.1-2.1-5.9-4.3-4.7 5.7-3.7 5.8-3.2 6.5-2.1 5-3.8-2.2-5.2 1.1-5.2 2.9 0 3.2-0.3 1.9-2.6-0.1-3.1 2.9 2 2.1-2.5 5.8 0 5.8 0.7 3.9 1.4 1.7 4.2 2.3 0.4 2.5-0.1 2.1-1.5 2.9-0.4 4.3 5.7 3.6 6 5.7 2.4 6.3-3.5 2.3-2.3 3.5-1.4 6.7-1.8 13.7-5.3 2.6-1.8 0.5 0.6 2.1 0.3 6.1-2.2 6.4 1.4 3-4.9 0-2-0.1-1.9 1-1.4 1-1.7-1.1-3.1-0.1-3.9 4.5-3.7 5.5-2.4 4.2-4.1 4.9-3.7 6.2-1.1 4.1-4.9 6.9 8.5 2.6 0.2 3 0.4 3.8 4.4 5.6 1.8 2.1 0.6-7.1 11.2-7.2 7.3-13.4 9.5-4.4 1.3-5.8 3.1-42.8 33.7-8.6 4.7-27.8 9.8-0.4-3.3 0-0.2-1.6-1.3-0.1 0-0.3 0.1-1.4 0.4-0.9 1.8-0.5 3.9-1.2 1.5-2 0.6-2.7 1.1-5 3.1-5 2.2-24 5.1-11.7 4-12.7 2.4-5.8 2.2-3.5 4.9-6.3-1.2-3.8 1.5-2.2 0.8-8.9 6.6-8.8 6.6-0.6 0.6z"},
    { name:"Ampara", d:"M716.5 818.5l-2.1-0.6-5.6-1.8-3.8-4.4-3-0.4-2.6-0.2-6.9-8.5 6-85.1-1.2-4.6-2.7-4 0-4.5-1.6-4.4 1-4.6 0.5-4.4-6.8-4.1-8.2-2.1-1.2-1.1-1.5-0.8-1.7 0-1.8-0.8-1.8-3.2-1-3.6-2.9-5.5 2.7-7.2 4.8-5.7 3.7-2.9-5-7-0.7-5-3.2-5.6-5.1-4.4-0.9-4.5 0.3-5.6-2.7-12.2 0.4-3.1-1.5-0.3-1.4-0.9 3.4-5.3-4.6-1.2-5.7 3.1-2.8 1-2.6 1.1-0.8 2.2-1.6 2.5-3.2 0.8-2.3 0.2 0 3 1.3 2.7 0.2 2.8-1 2.3-1.6 1.9-1.1 1.6-4.7 2.6-5.7-0.2 0.1 8.9 1.2 8.7-4.3 3.1-4.7 1.6-2-3.8-1.8-4.4-0.8-4.2-2.1-4.2-1.6-2.7-1-2.1-2.8-0.5-2 0.5-3.4-3.4-2.6-5.5-1.5-10.2-0.9-2.9-0.7-2.9 0.6-2.1 1.3-2.4 2.4-11.3-0.8-11.6-10.3-2.2-11.3 6.3-4.9 4.6-2.8 1.1-2.3 0.5-4.2 1.5-5.7-9.5-1.8-5.6-0.3-3.8-1.5-3.3-3.5-2.1-0.6-0.6 2.2-11.1-0.5-4.4-1.7-5.3 0.2-3.9 4.3 0 8.6-0.8 4.2-0.7 8.4 3.2 6.8 6.8 11.2 3.5 5.4 3.1 4.5 0.6 0.6-2.4 1-2.8 1.5-1.5 1.3-2.5-0.7-5.5 1-5.2 6.3 1.2 7.4-0.4 6.1 2 7.9 11.5 5.1 4.8 7 2 7.3 1.5-0.3 6.9-2.3 6.8 0.5 3.9 2.1 3.4 7.3 4.4 3.9 3.8 15.1 2.6 15.4-1.6 5.4-3.1 0.1 5.9 1.8 5.7 0.7 13.1 1.6 3.8 8.1-8 4.7-3.8 6.3-1 4.4-0.7 0.2 0.9 1.9 0.4 1.9-2.4 1.4 0 1.8 9.4-0.1 3.4 1.6 0 0-0.1 0.2-3.2 0.6-3.2 0.9-2.8 1.5-1.9 0-1.6-0.2-0.4-0.5-1.4 0.4-0.8 1.3 0.6 2.1 2 0.7 1.8 0.5 5 3.6 5.6 5.7 19.8-1.1 54.6 0.6 3.7 2.4 8.2 0.3 4.8-1.3 9.3-10.6 36.8-0.6 3.8-0.2 5-0.8 4.2-3.3 6.5-0.8 2.9-1.3 4-4.4 7-2.1 3.3 1.5 5.6-2.5 6.7-14.6 23.2z"},
    { name:"Batticaloa", d:"M623.8 412.4l3.9-1.3 20.7 2.2 0.7 2.4 4.8 16.3 1.8 10.6-4.2 5.8-2.3-9.6-0.3-1.4-3.6-9.7-1.6 0-0.3 7.4 0.3 2.3-0.2-0.1-0.2 0.7 0 1.2 0.4 1.4 0.7 0.9 2 0.6 0.4 0.7 1.9 4.9 4 3 3.9-0.3 1.3-5 1.5 0 1.4 2.6 0.4 0.7 1.9 8.4 1.9 3.3 2.6 2.8 1.7 2.7 2.8 6.6 1.1-1.1 1.5-1.1 0.7-1.1 1 2.2-1 1.1 0.5 0.9 0.5 0.5 0 0.1 0.3 0.5 0.1 1.1 0.1-0.1 1.1-0.9 2.4-1.2 1.2-0.9 0.5 1.3 0.7 1.6-0.5 1.9-0.8 1.9 0 1.4 0.1 1.4 1.6 3.2 2.8 2.2 1.9 1.4 1.7 2.8-1.1 0.1-0.5 0.3-0.7 0.5-0.5 0.3-0.4 0.2-0.7 2.6-0.6 2.5 2.7 7.9 1.4 1.7 3.3 3.8 0.1 0 4.8-0.9 1.6 0 1.6 4.9 1.8 3 0.6 0.9 9.9 10.4 3.2 5.1 0.6 4.5-5.1 1.6-2.4-1.6-5.6-7.3-3-2.5-3.8-1.4-0.1 0-0.4 0-2.7 0.2-2.4 2.5-1.6 5.2 2.7 1.2 2.7 0.4 2.3-0.9 1.7-2.3 2.7 1 2.5 1.2 0.9 1.1 0.6 0.7-0.4 2.5 3.1 2.8 3 2.9 2.4 2.8 2.5 4.2-1.2 1.4-0.3 1.3 0.4 1.6 1.1 2.2 1.5-1.8-0.9-3.1 2.7 0.9 5.4 4 1.3 1.8 4.2 10.9-0.3 0.4-1.3 5.9 0.2 0.7 0 0.1 1.1 2.2 0.3 0.9-0.9 1.6-1.7 1.3-1 1.4 1.2 2.1 1.2 1.5 0.3 1.1 0.1 0.2 0.7 1.3 1.7 1.5-2.5 1.8 0.2 0.9-4.4 0.7-6.3 1-4.7 3.8-8.1 8-1.6-3.8-0.7-13.1-1.8-5.7-0.1-5.9-5.4 3.1-15.4 1.6-15.1-2.6-3.9-3.8-7.3-4.4-2.1-3.4-0.5-3.9 2.3-6.8 0.3-6.9-7.3-1.5-7-2-5.1-4.8-7.9-11.5-6.1-2-7.4 0.4-6.3-1.2-3.3-18 2.1-17.9 1.7-6.8 5.2-3.5 6.6-0.9 8.3 1.1 2.2-0.2-1.9-8.6-3.9-8.4-1.7-8.6 1.9-36.7-1.3-12.2z m98.8 139l-0.4-2.5-0.9-1.9-1.1-2.3-0.7-2.3 0.1-2.4 0.7-2.1 0.3-2.3-1.1-2.7 2.9 2.9 2.9 6.7 2 3.1 0.5 1.3 2.2 5.8 5.6 8.9 2.6 4.2 3.9 20.2 0 0.1-0.2 4.6-3.4 2.8-3.2-2.5-1-1.1-0.5-0.5-0.1-1.1-0.2-1.2 0-0.5 1-14.6-0.7-5-2.5-2.2-1-2.1-7.7-11.3z"},
    { name:"Ratnapura", d:"M363.2 748.2l5.1-4.6-5.7-6 1.2-2.8 1-3.2 2.5-4 2.9-3.6 3.6-1.6 9.6 9.7 2.8 3.7 3.6 2.7 1.6-0.9 2.4-0.5 1.6 2 1.1 2.3 5.8 1.3 7-4 2.9-0.3 3.5 0.1 4.9 2.8 6.4 2.2 4.5 0.6 4.6-0.1-0.1 3.8 1.5 1.7-1.7 1.6-0.9 2.4 4.8 3.6 5.6 0.5 12 2.7 12.6 1.7 4.9-0.8 5.7-0.5 7.6 0.3 7.2-1 13.1-6.8 0.6 8.5 1.7-0.8 1.7-0.7 3.2 3.5 3.9 1.2-0.5 2.2-0.7 1.8-0.9 0.9-6.3 2.8-1.1 3.1 2.5 3.8 3.5 2.9 5.3 1 5.5-2.3 4.7-3.5 4.2-0.2-3.8 5.8-2.3 5.9-4.3 5.1-2.2 5.2-2.2 10-4.4 6.2-3.5 6.6 0.7 3.8 1.5 3.7 0.2 14.3 2.5 5 3.3 4.3 4.4 2.4 4.2 3 2.2 4.2 1.8 5.4 4.3 4.7 2.1 5.9-1.1 4.1-4.9-1.6-8.4-1.7-2.7-3.1-3.5-2.8-4.4 0.4-4.4 1.1-4.5-0.7-16.9-6.1-13.1-2.6 0-2.2 1.2-1.2-3-2.2 0.2-2.2-2.6-3.2-5.5 0.9-4.1-0.7 1.5-4.1-3.3-6.2-10.2 1.4-3.9 0-1.6 3.8-4.5 1-4.5 0.7-2-2.9-3.7 0.1-7.2-3.5-3.4-0.1-3.9-1.6-3.2-2.7-2.8-2.9-8.3-14.5-9.7-13.7-1.3-3.9 3.5-1.4-3.3-6.4-5.2-4.7-3.2-1.2-2.5-2.4-1.4-6.8-7-6.8-2.3-4.6-1.4-4.4 0.3-3.7-4-10.7-0.8-4.7z"},
    { name:"Monaragala", d:"M692.5 802.6l-4.1 4.9-6.2 1.1-4.9 3.7-4.2 4.1-5.5 2.4-4.5 3.7 0.1 3.9 1.1 3.1-1 1.7-1 1.4 0.1 1.9 0 2-3 4.9-6.4-1.4-6.1 2.2-2.1-0.3-0.5-0.6-2.6 1.8-13.7 5.3-6.7 1.8-3.5 1.4-2.3 2.3-6.3 3.5-5.7-2.4-3.6-6-4.3-5.7-2.9 0.4-2.1 1.5-2.5 0.1-2.3-0.4-1.7-4.2-3.9-1.4-5.8-0.7-5.8 0-2.1 2.5-2.9-2 0.1 3.1-1.9 2.6-3.2 0.3-2.9 0-1.1 5.2 2.2 5.2-5 3.8-6.5 2.1-5.8 3.2-5.7 3.7-1.8-5.4-2.2-4.2-4.2-3-4.4-2.4-3.3-4.3-2.5-5-0.2-14.3-1.5-3.7-0.7-3.8 3.5-6.6 4.4-6.2 2.2-10 2.2-5.2 4.3-5.1 2.3-5.9 3.8-5.8 2.8 0.2 1.7 2.7 1.1 4 1.8 1 1.9 0.4 2.1 4.7 1.6 5.1 1.6 0.8 1.6 0.9 1 7.4 2.6 3.3 2 3.3 0.9-6.2 3.3-5.1 2.5 1.6 2.5 1.2 0.7-5.5 4.8-1.7-3.4-5.4-2.2-6.4 0-3.6 0.5-3.4 3.4-5.3-0.3-4.1-4.1-1.1-0.9-3 2-4.2-0.5-5 0.6-4.9 7.8-0.7 2-3.9 6.7-2-5.6-7.9 4.9-2.7 5.9-1.6 2.9-2.4 2.3-2.9 1.1-1.9 1.4-1.4 2.3 1 3-0.6 1.1-3.4 0.6-3.6 1.6-2.4 1.2-2.6 0.9-6.4 1.1-4.2 0-4.3-0.7-3.2-1.2-3.1-1.7-2.1-1.2-1.1-2.5-3.2-8.5 2.2-2.7-2.8-2.3-4.8-3.5-3.5-2.9-3.7 0.7-4.7 2.7-4.1 3.8 0.5 3.2 3.5 3.8-1.6 2.1-3.6 6.3-8 1.8-4.4 0-4.8 9-2.1 1.8 4.4 2 3.8 4.7-1.6 4.3-3.1-1.2-8.7-0.1-8.9 5.7 0.2 4.7-2.6 1.1-1.6 1.6-1.9 1-2.3-0.2-2.8-1.3-2.7 0-3 2.3-0.2 3.2-0.8 1.6-2.5 0.8-2.2 2.6-1.1 2.8-1 5.7-3.1 4.6 1.2-3.4 5.3 1.4 0.9 1.5 0.3-0.4 3.1 2.7 12.2-0.3 5.6 0.9 4.5 5.1 4.4 3.2 5.6 0.7 5 5 7-3.7 2.9-4.8 5.7-2.7 7.2 2.9 5.5 1 3.6 1.8 3.2 1.8 0.8 1.7 0 1.5 0.8 1.2 1.1 8.2 2.1 6.8 4.1-0.5 4.4-1 4.6 1.6 4.4 0 4.5 2.7 4 1.2 4.6-6 85.1z"},
    { name:"Kegalle", d:"M363.2 710l0.7-1.9-0.1-2.1-3.4-11 1.2-6.8 2.9-6.7 3.4-2.4 1.7-3.9-4.9-1.4-5.6 1.3-2.8-5.8 1-6.6 3.6-1.9 3-2.8 0.6-8 2.3-1.8-0.4-3.1 4.7-2.7 4.8-4.3 5-3.6 5.4-2.5 11.3-2.5 2.5-0.1 1.6-2.3 0.8-2.7-0.3-4.8 0.8-4.4 5.1-2 5.5 0.7 3.4 3.5 2.1 4.5 2.8 7.1 10 8.7-0.4 4.5 2 1.4 5.8 3.3 2.8 3.4-0.5 4.1 0 3.4 3.4 3.3 2.6 3.4-1.3 3.1-1.8 2.8-2.5 0.6-2.5 0.2-3.6 3.9-8 1.3-2.6 2.4 3.5 8.4 1.6 2.9-1.6 3.6-0.2 4.6 0.3 0.7 0.8 0.2-2 3.3-3.2 2.8-1.8 0.6-1.2 1.8 1.2 1.7 1.5 1.5-1.6 8.7 2 6.7 6.7 2.1 5.3 4 1.8 6.1 0.4 3.1-2.7 2.4-4.6 0.1-4.5-0.6-6.4-2.2-4.9-2.8-3.5-0.1-2.9 0.3-7 4-5.8-1.3-1.1-2.3-1.6-2-2.4 0.5-1.6 0.9-3.6-2.7-2.8-3.7-9.6-9.7-3.6 1.6-0.1-2.3-0.3-2.2 3.1-2.9-0.7-4.2-4-2-5-0.4z"},
    { name:"Badulla", d:"M549.6 562l0.6 0.6 3.5 2.1 1.5 3.3 0.3 3.8 1.8 5.6 5.7 9.5 4.2-1.5 2.3-0.5 2.8-1.1 4.9-4.6 11.3-6.3 10.3 2.2 0.8 11.6-2.4 11.3-1.3 2.4-0.6 2.1 0.7 2.9 0.9 2.9 1.5 10.2 2.6 5.5 3.4 3.4 2-0.5 2.8 0.5 1 2.1 1.6 2.7 2.1 4.2 0.8 4.2-9 2.1 0 4.8-1.8 4.4-6.3 8-2.1 3.6-3.8 1.6-3.2-3.5-3.8-0.5-2.7 4.1-0.7 4.7 2.9 3.7 3.5 3.5 2.3 4.8 2.7 2.8 8.5-2.2 2.5 3.2 1.2 1.1 1.7 2.1 1.2 3.1 0.7 3.2 0 4.3-1.1 4.2-0.9 6.4-1.2 2.6-1.6 2.4-0.6 3.6-1.1 3.4-3 0.6-2.3-1-1.4 1.4-1.1 1.9-2.3 2.9-2.9 2.4-5.9 1.6-4.9 2.7 5.6 7.9-6.7 2-2 3.9-7.8 0.7-0.6 4.9 0.5 5-2 4.2 0.9 3 4.1 1.1 0.3 4.1-3.4 5.3-0.5 3.4 0 3.6 2.2 6.4 3.4 5.4-4.8 1.7-0.7 5.5-2.5-1.2-2.5-1.6-3.3 5.1-0.9 6.2-2-3.3-2.6-3.3-1-7.4-1.6-0.9-1.6-0.8-1.6-5.1-2.1-4.7-1.9-0.4-1.8-1-1.1-4-1.7-2.7-2.8-0.2-4.2 0.2-4.7 3.5-5.5 2.3-5.3-1-3.5-2.9-2.5-3.8 1.1-3.1 6.3-2.8 0.9-0.9 0.7-1.8 0.5-2.2-3.9-1.2-3.2-3.5-1.7 0.7-1.7 0.8-0.6-8.5 4.4-1.1 2.3-3.4-2.1-1-2.1-1.4 3.4-5.5-0.9-1.6-1.2-1.4-1.3-3.6-1.6-3.2-7.3-3.7-0.3-3.7 4.2-0.2 4.3 0.2 3.1-3.5 1.1-4.6 3.7-3.4 4.1-2 8.8-1.9 5.1-7.6 1-4.5 2.1-4.1 1.9-1.7 1.5-2 0.8-1.7-0.4-1.6-1.2-4.1 1.1-2.1 1.6-2-0.9-1.2-1-1.2-0.5-2 0.5-2.1-1.7-5.8 0.2-4.2 2.9-1.8 4.9-1.4 6.2-5.7 0.4-7.6-5-16.8-2-35.1-1.2-19 2.3-10.9z"},
    { name:"Matale", d:"M549.8 537.3l-0.2 3.9 1.7 5.3 0.5 4.4-2.2 11.1-2.3 10.9 1.2 19-7.3-0.8-4.7 0.7-2.6 4.3-1.4 1.3-1.7 0.9-2.8-3.5-3.8 1.9-9.5-0.1-7.3 6.1-6.6 1-8.6-7.1-3.4-1.4-3.2 2-1.4 3.6 0.8 8.5-5 5.5-8.4-0.5-14.7-9.2-4.7-6.6 0.1-2.4 1.3-1.7 0.5-2.8-0.7-2.9-1.2-2.5-1.4-2.3-2.3-4.7 0.6-4.9 3.3-3 0.8-2-0.1-2.1 0.7-2.7 0.1-2.7-4.2-4.2-1.3-7.2-0.7-7.7-1.1-1.7-0.9-0.6 0-4-1.6-4-2.3-3.8-1.6-3.7-1.8-0.5-2-1.1-0.6-4.1 1.1-3.8 4.9-3.6 7.7-2.9 4.1-4.9 3.7 0.1 2.8 1.8 3.4-2.3 1.7-2.8 1.6-1.2 1.5-0.8-0.1-1.7-0.6-1.1 3-3 2.2-3.4 0-4.3 1.2-3.8 2.4 0 1.7 0.5 1.3-1 4.5-4.7 3-2.6 4.4-2.2 4.8-2 2 2 3.2 3.6-0.1 4.1 1.3 1.3 1.9 0.8 1.5-1 0.1-1.5 2.8-1.3 2.7 0.8 3.6 0.7 3.4 2.1-6.9 7.2-2.3 11-0.6 5.4-2.2 9.4-0.8 1.6-0.4 1.7-6.7 1.5-1.6 6.4 3.1 14.1-0.4 4.6 2.3 3.2 6.1 1.3 5.8-2.4 4.5-4.2 2 2.8 3.6 2.2 1-4.1 0.5-4.1 12.3 0.8 12-2.2z"},
    { name:"Polonnaruwa", d:"M534.8 393.9l3.5-1 2.7 4 3.7 1.5 3.6 2.7 0.9 4.9 2.9 2.9 9.7-1 17.5 4.3 4.1 0 3.8 2.2 3.7 2.9 4.1 2.1 2.9-0.3 1.7 2.4 0.3 2.9-0.1 3 0.8 4.4-1.2 2.9-2.7 1.7 0.9 0.7 1.2 0.4 5.7-1.4 3.3-7.6 1.2-2.2 1.4-6.1 1.6-1.4 1.8-1.3 1.5-2.8 2.1-2.3 2.9 0 3.5 0 1.3 12.2-1.9 36.7 1.7 8.6 3.9 8.4 1.9 8.6-2.2 0.2-8.3-1.1-6.6 0.9-5.2 3.5-1.7 6.8-2.1 17.9 3.3 18-1 5.2 0.7 5.5-1.3 2.5-1.5 1.5-1 2.8-0.6 2.4-4.5-0.6-5.4-3.1-11.2-3.5-6.8-6.8-8.4-3.2-4.2 0.7-8.6 0.8-4.3 0-12 2.2-12.3-0.8-0.5 4.1-1 4.1-3.6-2.2-2-2.8-4.5 4.2-5.8 2.4-6.1-1.3-2.3-3.2 0.4-4.6-3.1-14.1 1.6-6.4 6.7-1.5 0.4-1.7 0.8-1.6 2.2-9.4 0.6-5.4 2.3-11 6.9-7.2-3.4-2.1-3.6-0.7-2.7-0.8-2.8 1.3-0.1 1.5-1.5 1-1.9-0.8-1.3-1.3 0.1-4.1-3.2-3.6-2-2 0.3-6.1 4.5-6.4-4.6-3.6 0.4-8.1 1.6-9.1 3.3-8.8 1.9-9.8 3.4-8.9 9.1-1.7 10.2 0 3-1.8 0.9-4.1 1.8-4.1 2.9-3.1z"},
    { name:"Kurunegala", d:"M308.3 641.1l-0.6-13.8-8.5-45.8-0.4-8 0.4-8 2.5-6.4 3.5-5.9 0.9-2.7 1.6-2.3 3.3-0.8 2.8-1.5-1.3-2.2-2.8-0.7 1.1-3 1.6-2.7 3-0.9 3.3-0.3 2.5-1 1.6-2.2-0.9-2.4-1.2-2.6 0.7-6.2 2.2-5.6 0.4-2.8 0.9-2.5 3-1.6 2.8-1.9 0.6-2.5 1.1-2.4 4.9-2.5 0.9-2.1 0.4-2.4 1.4-3.2 3.4-1.6-0.2 0.4-0.2 0.4 1.4-0.4 1.8-1.9 0.1-2.8 1.3-2.3 4.8 2.7 2.9-2.2-2.8-5.2 1.4-2.7 1.7-2.6 0.2-5.3-0.2-6.3 0.9-3 0.6-2.8-2.7-1.8-3.2-1.1-2.2-4.1-0.8-4.6-2.4-9.2 0.1-4.7-0.5-4.4 5 2.8 21.3 9.7 4.5 1.2 4.4 1.8 3.5 2.4 4.2 0.7 7.7 2.9 6.9 5.7 3.8 3.8 4.2 2.6 4.3-0.2 3.5 2.9 0 2.9-0.4 2.9 0.7 5-0.3 4.2 0.4 4.1 3.2 1.3 3.8 0.3 1.9 3.2 0.6 3.9 2.1 5.4 1.2 5.5-0.9 8.1 5.9 5.6-1.1 3.8 0.6 4.1 2 1.1 1.8 0.5 1.6 3.7 2.3 3.8 1.6 4 0 4 0.9 0.6 1.1 1.7 0.7 7.7 1.3 7.2 4.2 4.2-0.1 2.7-0.7 2.7 0.1 2.1-0.8 2-3.3 3-0.6 4.9 2.3 4.7 1.4 2.3 1.2 2.5 0.7 2.9-0.5 2.8-1.3 1.7-0.1 2.4-2.8 1.3-2.7 0.7 1.9 3 1.3 3.1-2.4 1.2-3.4-0.5-3.3 1.8 0.3 2.6-0.3 2.4-4-0.3-3.5-2.5-3.4 0-0.7 4.6-1 1.3-0.8 1.4 0.2 1.5 0.4 1.1-4.1 1.2-4.8-0.5-2.1-4.5-3.4-3.5-5.5-0.7-5.1 2-0.8 4.4 0.3 4.8-0.8 2.7-1.6 2.3-2.5 0.1-11.3 2.5-5.4 2.5-5 3.6-4.8 4.3-4.7 2.7-4-2.9-5.7-6.6-1.4-1.9-0.6-2-2.1-2.3-6.4 1.2-5.7 4-6.6 1.9-6.4-4.4-5.5 0.2-8.8 6.9-4.9 1.9z"},
    { name:"Anuradhapura", d:"M495.4 261.4l6.5-2.6 6.8 0.1 5.8 3.4 10.1 7 3.5 3.9 1.9 2.5 2.2 1.7-2.7 6-3.9 5.8 0.1 10 4.3 9.4 1.7 4.9-3.5 8.3 0.2 4.8 1.9 2.2 2.5 2.4 0.9 5.6 6.1 9.1 3.3 7.7 2 2.7 2.7 2 1.5 3.6-1.9 3.4-3.2 2.2-2.9 2.8-0.9 2.8-0.6 2.9-5 17.9-2.9 3.1-1.8 4.1-0.9 4.1-3 1.8-10.2 0-9.1 1.7-3.4 8.9-1.9 9.8-3.3 8.8-1.6 9.1-0.4 8.1 4.6 3.6-4.5 6.4-0.3 6.1-4.8 2-4.4 2.2-3 2.6-4.5 4.7-1.3 1-1.7-0.5-2.4 0-1.2 3.8 0 4.3-2.2 3.4-3 3 0.6 1.1 0.1 1.7-1.5 0.8-1.6 1.2-1.7 2.8-3.4 2.3-2.8-1.8-3.7-0.1-4.1 4.9-7.7 2.9-4.9 3.6-5.9-5.6 0.9-8.1-1.2-5.5-2.1-5.4-0.6-3.9-1.9-3.2-3.8-0.3-3.2-1.3-0.4-4.1 0.3-4.2-0.7-5 0.4-2.9 0-2.9-3.5-2.9-4.3 0.2-4.2-2.6-3.8-3.8-6.9-5.7-7.7-2.9-4.2-0.7-3.5-2.4-4.4-1.8-4.5-1.2-21.3-9.7-5-2.8-2.5-3.3-3.4-2.8-4.7 0.2-4.1-3.1-3.9 1.8-4.8 0-1.4-4.2-5.8-23.4-3.4-6.6 2.6-5.7 3.9-1.8 1-2.1 0.3-1.7 7.2-5.9 4.2-8.9-1.3-9.6 1.9 0.9 2.2 0.3 0.5-21.6-1.8-13.7 10.2 4.2 11.3 0.1 22.5-5.9 0.1 7.5 2.3 6.6 3.5 1.2 3.4 1.6 1.5 2.8 0.9 3.2 2.4 4.9 4.9 2.6 2.4 0.7 2.2 0.1 3.5-6.3 4.1-1.8 4.3-10.1 9.1-11.8 7-3.2 4.3 2.2 3.9 2.8 7.3 0 6.2-4.7 5.8-5.3 5-5.9 2.8-4.3 3.3-3.9 5.5-4.4-2-6-4.2-5.5-6-2.1-0.4-5.1 17.1-0.6 6.7-4.7 6.1-1.8 6.3-1.2z"},
    { name:"Nuwara-Eliya", d:"M508.4 753.2l-13.1 6.8-7.2 1-7.6-0.3-5.7 0.5-4.9 0.8-12.6-1.7-12-2.7-5.6-0.5-4.8-3.6 0.9-2.4 1.7-1.6-1.5-1.7 0.1-3.8 2.7-2.4-0.4-3.1-1.8-6.1-5.3-4-6.7-2.1-2-6.7 1.6-8.7-1.5-1.5-1.2-1.7 1.2-1.8 1.8-0.6 3.2-2.8 2-3.3-0.8-0.2-0.3-0.7 6.6 0.6 10.4 15.4 6.7 4 5-5.3 2.7-7.8-2.7-3.7-3.4-3.3-4.1-7.5-1.8-0.8-1.9 0.6 5.2-4.2 8.4 1 4.6-1 6.7-4.6 4.5-0.1 4 1 14.8-17.6 4.7-7.9-2.1-8.7-0.7-6.7 4 3.6 3.3 4.4 2.4 0.9 2 0.2 5.3 8.4 8.4 0.6 9.9-1.4 9.6 1.9-0.2 4.2 1.7 5.8-0.5 2.1 0.5 2 1 1.2 0.9 1.2-1.6 2-1.1 2.1 1.2 4.1 0.4 1.6-0.8 1.7-1.5 2-1.9 1.7-2.1 4.1-1 4.5-5.1 7.6-8.8 1.9-4.1 2-3.7 3.4-1.1 4.6-3.1 3.5-4.3-0.2-4.2 0.2 0.3 3.7 7.3 3.7 1.6 3.2 1.3 3.6 1.2 1.4 0.9 1.6-3.4 5.5 2.1 1.4 2.1 1-2.3 3.4-4.4 1.1z"},
    { name:"Vavuniya", d:"M498.3 254l-1.9 3.4-1 4-6.3 1.2-6.1 1.8-6.7 4.7-17.1 0.6 0.4 5.1 6 2.1 4.2 5.5 2 6-5.5 4.4-3.3 3.9-2.8 4.3-5 5.9-5.8 5.3-6.2 4.7-7.3 0-3.9-2.8-4.3-2.2-7 3.2-9.1 11.8-4.3 10.1-4.1 1.8-3.5 6.3-2.2-0.1-2.4-0.7-4.9-2.6-2.4-4.9-0.9-3.2-1.5-2.8-3.4-1.6-3.5-1.2-2.3-6.6-0.1-7.5-8.8-11.3-5.4-4.2 0-3 0.9-3.5 5.9-0.6 3.5-7.8 6.4-3.6 8.4 0.9 13-1.6 12.3-4.6 1.2-8.1-3.5-9-3.6-5.7-6.2-2.9 10.7-6.8 6.4-5.2 4.1-6.3-0.2-3.9-0.9-4 0-2.1-0.2-1.9-3.4-0.5-1.8-2.5 0.6-3.4 4.2-0.4 4.4 0.3 8-0.2 5.7 3.6 3.6 5.3 5.6-2.5 4-3.5 2.3-1.1 2.2-1.3 0.4-1.2 0.5-1.1 7.5-0.2 7.2 2.7 0.8 7.5 6.2 0.7 2.7 4.7-2.2 3.3-0.4 3.2 3.6-0.9 3.4-2.3 7.2 1.1 7.4 4.5 2.8 3.7-4.3 15.8z"},
    { name:"Kandy", d:"M428.6 698.3l0.2-4.6 1.6-3.6-1.6-2.9-3.5-8.4 2.6-2.4 8-1.3 3.6-3.9 2.5-0.2 2.5-0.6 1.8-2.8 1.3-3.1-2.6-3.4-3.4-3.3 0-3.4 0.5-4.1-2.8-3.4-5.8-3.3-2-1.4 0.4-4.5-10-8.7-2.8-7.1 4.8 0.5 4.1-1.2-0.4-1.1-0.2-1.5 0.8-1.4 1-1.3 0.7-4.6 3.4 0 3.5 2.5 4 0.3 0.3-2.4-0.3-2.6 3.3-1.8 3.4 0.5 2.4-1.2-1.3-3.1-1.9-3 2.7-0.7 2.8-1.3 4.7 6.6 14.7 9.2 8.4 0.5 5-5.5-0.8-8.5 1.4-3.6 3.2-2 3.4 1.4 8.6 7.1 6.6-1 7.3-6.1 9.5 0.1 3.8-1.9 2.8 3.5 1.7-0.9 1.4-1.3 2.6-4.3 4.7-0.7 7.3 0.8 2 35.1 5 16.8-0.4 7.6-6.2 5.7-4.9 1.4-2.9 1.8-9.6-1.9-9.9 1.4-8.4-0.6-5.3-8.4-2-0.2-2.4-0.9-3.3-4.4-4-3.6 0.7 6.7 2.1 8.7-4.7 7.9-14.8 17.6-4-1-4.5 0.1-6.7 4.6-4.6 1-8.4-1-5.2 4.2 1.9-0.6 1.8 0.8 4.1 7.5 3.4 3.3 2.7 3.7-2.7 7.8-5 5.3-6.7-4-10.4-15.4-6.6-0.6z"},
  ];
}

function Legend(){
  return <div className="legend">
    <span className="legend-item"><span className="legend-swatch none" /> No Data</span>
    <span className="legend-item"><span className="legend-swatch partial" /> Partial</span>
    <span className="legend-item"><span className="legend-swatch full" /> Complete</span>
  </div>;
}

// Simple charts (inline SVG)
function BarChart({ data }){
  if(!data || data.length===0) return <em style={{opacity:.6}}>No data</em>;
  const max = Math.max(...data.map(d=> d.votes));
  return <div className="bar-chart">
    {data.map(d=> <div key={d.party_code} className="bar-row">
      <div className="bar-row-head"><span>{d.party_code}</span><span className="mono">{d.votes.toLocaleString()}</span></div>
      <div className="bar-track"><div className="bar-fill" style={{width:(d.votes/max*100)+'%', background:getPartyColor(d.party_code)}} /></div>
    </div>)}
  </div>;
}

function PieChart({ data }){
  if(!data || data.length===0) return <em style={{opacity:.6}}>No data</em>;
  const total = data.reduce((a,b)=> a + b.votes, 0) || 1;
  let acc = 0;
  const circles = data.map((d,i)=> {
    const frac = d.votes / total;
    const dash = frac * 100;
    const gap = 100 - dash;
    const circle = <circle key={d.party_code} r="15.9" cx="16" cy="16" fill="transparent" stroke={getPartyColor(d.party_code)} strokeWidth="8" strokeDasharray={`${dash} ${gap}`} strokeDashoffset={-acc} />;
    acc += dash;
    return circle;
  });
  return <div className="pie-chart">
    <svg viewBox='0 0 32 32' className="pie-svg">{circles}</svg>
    <div className="pie-legend">
      {data.map(d=> <div key={d.party_code} className="pie-legend-row">
        <span className="party-swatch" style={{background:getPartyColor(d.party_code)}}></span>
        {d.party_code} {(d.votes/total*100).toFixed(1)}%
      </div>)}
    </div>
  </div>;
}

function TopNav({ current, onChange }){
  const tabs = [
    { key:'dashboard', label:'Dashboard' },
    { key:'map', label:'Map' },
    { key:'charts', label:'Charts' },
    { key:'coverage', label:'Coverage' },
  ];
  return <header className="top-nav">
    <strong className="brand">Election Results</strong>
    <nav className="nav-tabs">
      {tabs.map(t=> <button key={t.key} onClick={()=> onChange(t.key)} className={current===t.key? 'tab-btn active':'tab-btn'}>{t.label}</button>)}
    </nav>
  </header>;
}

// styles moved to styles.css

function Card({ title, children }){
  return <div className="card">
    <h4 className="card-title">{title}</h4>
    {children}
  </div>;
}

function DetailOverlay({ result, onClose }){
  // Result could be a district aggregated object OR raw result; detect shape
  const isDistrictAgg = result && result.divisionCodes;
  const parties = isDistrictAgg? result.parties : (result.by_party || []);
  const top = parties.slice().sort((a,b)=> b.votes - a.votes)[0];
  return <div className="overlay-lite" role="dialog">
    <div className="overlay-content-box">
      <div className="overlay-head">
        <h2 className="overlay-title">{isDistrictAgg? result.ed_name : `${result.ed_name} / ${result.pd_name}`}</h2>
        <button onClick={onClose} className="btn-close">Close</button>
      </div>
      {isDistrictAgg && <p className="overlay-meta">Divisions reported: {result.reportedCount}/{result.totalDivisions} ({Math.round(result.coverageRatio*100)}%) • Status: {result.complete? 'Complete':'Partial'}</p>}
      {!isDistrictAgg && <p className="overlay-meta">Seq {result.sequence_number} • Ref {result.reference} • {new Date(result.createdAt).toLocaleString()}</p>}
      <div className="overlay-summary">
        <div className="summary-block">
          <strong>{isDistrictAgg? 'Aggregated Parties':'Summary'}</strong>
          {!isDistrictAgg && <ul className="plain-list">
            {Object.entries(result.summary || {}).map(([k,v])=> <li key={k}>{k}: <strong>{v}</strong></li>)}
          </ul>}
          {isDistrictAgg && <div className="totals-line">Total Votes: <strong>{parties.reduce((a,p)=> a+p.votes,0).toLocaleString()}</strong></div>}
        </div>
        <div className="summary-block">
          <strong>Top Party</strong>
          {top && <div className="top-party"><span className="party-swatch" style={{background:getPartyColor(top.party_code)}}></span>{top.party_code} {top.party_name} ({top.votes.toLocaleString()} votes)</div>}
        </div>
      </div>
      <h3 className="subheading">Parties</h3>
      <table className="tight-table">
        <thead><tr><th align='left'>Code</th><th align='left'>Party</th><th align='right'>Votes</th></tr></thead>
        <tbody>
          {parties.slice().sort((a,b)=> b.votes - a.votes).map(p=> <tr key={p.party_code}>
            <td><span className="party-swatch sm" style={{background:getPartyColor(p.party_code)}}></span>{p.party_code}</td>
            <td>{p.party_name}</td>
            <td align='right' className="mono">{p.votes.toLocaleString()}</td>
          </tr>)}
        </tbody>
      </table>
      {isDistrictAgg && <>
        <h3 className="subheading">Divisions Coverage</h3>
        <div className="divisions-list">
          {result.divisionCodes.map(code=> {
            const reported = result.reportedDivisions.includes(code);
            return <span key={code} className={reported? 'division-chip reported':'division-chip pending'}>{code}{!reported && '*'}</span>;
          })}
        </div>
        <p className="pending-note">* awaiting result</p>
      </>}
    </div>
  </div>;
}
